all_city = ["阿坝", "阿里", "阿拉善左旗", "阿尔山", "鞍山", "阿勒泰", "阿克苏", "安庆", "安顺", "阿拉善右旗",
            "北京", "百色", "北海", "白城", "白山", "包头", "巴彦淖尔", "博尔塔拉", "毕节", "巴中", "布尔津",
            "重庆", "成都", "常州", "昌都", "沧源", "长春", "赤峰", "朝阳", "长治", "池州", "长沙", "常德", "天水", "承德",
            "大连", "达州", "稻城", "迪庆", "德宏", "大庆", "丹东", "德令哈", "东营", "大同", "敦煌", "大理",
            "鄂尔多斯", "二连浩特", "恩施", "额济纳旗", "佛山", "福州", "抚远", "富蕴", "阜阳",
            "广州", "广元", "桂林", "格尔木", "果洛", "贵阳", "固原", "赣州", "甘南", "甘孜",
            "杭州", "海口", "合肥", "哈尔滨", "呼和浩特", "惠州", "河池", "淮安", "黑河", "呼伦贝尔", "霍林郭勒", "花土沟", "哈密", "和田", "汉中", "黄山",
            "邯郸",
            "衡阳", "怀化",
            "济南", "揭阳", "加格达奇", "佳木斯", "鸡西", "建三江", "锦州", "济宁", "景德镇", "井冈山", "金昌", "嘉峪关", "九寨沟",
            "昆明", "康定", "库车", "喀什", "克拉玛依", "库尔勒", "凯里",
            "洛阳", "拉萨", "龙岩", "泸州", "柳州", "连云港", "林芝", "隆阳", "临沧", "澜沧", "丽江", "临沂", "临汾", "吕梁", "六盘水", "荔波", "黎平",
            "陇南",
            "兰州",
            "梅州", "绵阳", "漠河", "满洲里",
            "南京", "宁波", "南充", "南宁", "南通", "宁蒗", "南阳", "南昌",
            "攀枝花", "普洱", "牡丹江",
            "青岛", "秦皇岛", "泉州", "衢州", "黔江", "琼海", "齐齐哈尔", "且末", "庆阳", "祁连",
            "日喀则", "若羌", "日照",
            "三亚", "沈阳", "上海", "深圳", "沙县", "莎车", "石河子", "石家庄", "邵阳", "上饶", "十堰", "神农架", "松原", "苏州",
            "天津", "太原", "台州", "腾冲", "通化", "通辽", "吐鲁番", "塔城", "铜仁", "唐山", "图木舒克",
            "武汉", "乌鲁木齐", "武夷山", "温州", "万州", "梧州", "无锡", "文山", "五大连池", "乌兰浩特", "乌兰察布", "乌海", "潍坊", "威海", "巫山",
            "厦门", "西安", "西昌", "徐州", "西双版纳", "锡林浩特", "西宁", "新源", "忻州", "兴义", "襄阳", "信阳",
            "烟台", "义乌", "宜宾", "盐城", "延边", "营口", "玉树", "伊宁", "运城", "延安", "榆林", "银川", "宜春", "宜昌", "岳阳", "伊春",
            "珠海", "舟山", "昭通", "扎兰屯", "遵义", "张家口", "张家界", "中卫", "郑州", "张掖", "湛江"]

hot_city = ["北京", "上海", "成都", "三亚", "广州", "重庆", "深圳", "西安", "杭州", "厦门", "武汉", "大连", "苏州"]

def partition(ls, size):
    """
    Returns a new list with elements
    of which is a list of certain size.

        partition([1, 2, 3, 4], 3)
        [[1, 2, 3], [4]]
    """
    return [ls[i:i+size] for i in range(0, len(ls), size)]

def chunkIt(seq, num):
    avg = len(seq) / float(num)
    out = []
    last = 0.0

    while last < len(seq):
        out.append(seq[int(last):int(last + avg)])
        last += avg

    return out


def generateGroupList(all_city, hot_city, n=3):
    curr_all_city = list(set(all_city).difference(set(hot_city)))
    curr_all_city.sort()

    res_all_city = chunkIt(curr_all_city, n)
    res_hot_city = chunkIt(hot_city, n)

    cityGroup = []
    for i in range(n):
        cityGroup.append(
            res_all_city[i] + res_hot_city[i]
        )

    # for group in cityGroup:
    #     group.sort()
    #     print(group)
    return cityGroup


cityGroup = generateGroupList(all_city, hot_city, 3)
